{
  "swagger": "2.0",
  "info": {
    "description": {
      "$ref": "../md_files/README.md"
    },
    "version": "v0.2.3",
    "title": "SpaceLogic RP-X Controller - Web API"
  },
  "x-servers": [
    {
      "url": "https://sandboxrpdev.azurewebsites.net",
      "description": "Sandbox"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/v1/token": {
      "post": {
        "tags": [
          "token"
        ],
        "summary": "Creating Token",
        "description": "A web token will be created and returned. The Client application then uses the token to access APIs in the next request until the token is valid.",
        "operationId": "gettingtoken",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        }
      }
    },
    "/v1/system/settings/webserver": {
      "get": {
        "tags": [
          "webserver settings"
        ],
        "summary": "Getting web server settings",
        "description": "Web Server Settings will be returned.\\\n**This API will be available for admin user only.**",
        "operationId": "gettingwebserversettings",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WebServerSettings"
            }
          }
        }
      },
      "put": {
        "tags": [
          "webserver settings"
        ],
        "summary": "Update web server settings",
        "description": "Updating web server settings.\\\n**This API will be available for admin user only.**",
        "operationId": "updatewebserversettings",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Provide web server settings.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebServerSettings"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WebServerSettings"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/system/settings/webserver/certificate/servercert": {
      "post": {
        "tags": [
          "webserver settings"
        ],
        "summary": "posting a new certificate to Server",
        "description": "Setting a new server certificate.\\\n**This API will be available for admin user only.**",
        "operationId": "servercert",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "file",
            "description": "Provide content of certificate in DER format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v1/system/settings/webserver/certificate/serverprivatekey": {
      "post": {
        "tags": [
          "webserver settings"
        ],
        "summary": "posting a new private key to Server",
        "description": "Setting a new server private key.\\\n**This API will be available for admin user only.**",
        "operationId": "serverprivatekey",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "file",
            "description": "Provide content of key in DER format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v1/system/settings/webserver/certificate/clientcacert": {
      "post": {
        "tags": [
          "webserver settings"
        ],
        "summary": "posting a new client CA certificate to Server",
        "description": "Setting a new client CA certificate.\\\n**This API will be available for admin user only.**",
        "operationId": "clientcacert",
        "consumes": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "file",
            "description": "Provide content of ca cert in DER format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v1/system/settings/webserver/certificate/trynewcerts": {
      "post": {
        "tags": [
          "webserver settings"
        ],
        "summary": "trying new certs",
        "description": "Trying new certs by restarting web server.\\\nIf you reboot your device or restart web server without storing it, new certs will be discarded.\\\n**This API will be available for admin user only.**",
        "operationId": "trynewcert",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v1/system/settings/webserver/certificate/storecerts": {
      "post": {
        "tags": [
          "webserver settings"
        ],
        "summary": "Storing certs",
        "description": "Storing Certs running on a system currently.\\\nThis api should be called after /trynewcerts api to store new certificates.\\\n**This API will be available for admin user only.**",
        "operationId": "storecerts",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v1/local/usermngmt": {
      "get": {
        "tags": [
          "user management"
        ],
        "summary": "Getting a list of user Ids",
        "description": "A list of user Ids will be returned.\\\n**This API will be available for admin user only.**",
        "operationId": "gettingusers",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user management"
        ],
        "summary": "Creating a user account",
        "description": "A user account will be created.\\\n**This API will be available for admin user only.**\\\nUser name and password policy\n- Maximum length of User name is 20.\n- User password must be between 8 and 20 characters.\n- User password must contain at least one uppercase, or capital, letter (ex: A, B, etc.)\n- User password must contain at least one lowercase letter.\n- User password must contain at least one number digit (ex: 0, 1, 2, 3, etc.)\n- User password must contain at least one special character -for example: $, #, @, !,%,^,&,*,(,)",
        "operationId": "creatinguser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Provide user information to create a new account.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreation"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/local/usermngmt/admin": {
      "put": {
        "tags": [
          "user management"
        ],
        "summary": "Update admin user",
        "description": "Updating admin user information.\\\n**This API will be available for admin user only.**\\\nAdmin name and password policy\n- Maximum length of User name is 20.\n- User password must be between 8 and 20 characters.\n- User password must contain at least one uppercase, or capital, letter (ex: A, B, etc.)\n- User password must contain at least one lowercase letter.\n- User password must contain at least one number digit (ex: 0, 1, 2, 3, etc.)\n- User password must contain at least one special character -for example: $, #, @, !,%,^,&,*,(,)",
        "operationId": "updateadmin",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Provide user information to create a new account.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/adminUser"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/v1/local/usermngmt/{userId}": {
      "get": {
        "tags": [
          "user management"
        ],
        "summary": "Getting user information",
        "description": "User information will be returned.\\\n**This API will be available for admin user only.**",
        "operationId": "gettinguser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "unique number of user.",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          },
          "404": {
            "description": "Property not found"
          }
        }
      },
      "put": {
        "tags": [
          "user management"
        ],
        "summary": "updating a user information",
        "description": "User information will be updated.\\\n**This API will be available for admin user only.**",
        "operationId": "updateuser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "unique number of user.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Provide user information to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Property not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user management"
        ],
        "summary": "Deleting user account",
        "description": "User information will be returned.\\\n**This API will be available for admin user only.**",
        "operationId": "deleteuser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "unique number of user.",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Property not found"
          }
        }
      }
    },
    "/v1/protocols/bacnet/local/objects": {
      "get": {
        "tags": [
          "local object"
        ],
        "summary": "Getting Object List",
        "description": "A list of objectIds that are accessible via the APIs will be returned.  \nHere's a list of object types available.\\\n0: Analog-Input Object \\\n1: Analog-Output Object \\\n2: Analog-Value Object \\\n3: Binary-Input Object \\\n4: Binary-Output Object \\\n5: Binary-Value Object \\\n13: Multi-state Input Object \\\n14: Multi-state Output Object \\\n19: Multi-state Value Object \\\n45: Integer-Value Object\n\nThe SandBox application for this API document will return BACnet object data based on RP-33 BMS application. For more information, please refer to Developer Guide > Limitations in this document.",
        "operationId": "gettingobject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectType",
            "in": "query",
            "description": "This is optional. BACnet Object type.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Objects"
            }
          }
        }
      }
    },
    "/v1/protocols/bacnet/local/objects/{objectId}": {
      "get": {
        "tags": [
          "local object"
        ],
        "summary": "Find BACnet object by ID",
        "description": "Returns a single object.\n\nThe SandBox application for this API document will return BACnet object data based on RP-33 BMS application. For more information, please refer to Developer Guide > Limitations in this document.",
        "operationId": "getObjectById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "description": "objectId is combination of object type and instance number.\nFor example, 00000000 01 (object type: 1) / 000000 00000000 00001011 (instance Number: 11)",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "404": {
            "description": "Object not found"
          }
        }
      }
    },
    "/v1/protocols/bacnet/local/objects/{objectId}/properties": {
      "get": {
        "tags": [
          "local object"
        ],
        "summary": "Getting Property List",
        "description": "A list of propertyIDs that exist on the object will be\nreturned.\\\nYou will find BACNet Property Identifier from BACNet protocol document.\n\nThe SandBox application for this API document will return BACnet object data based on RP-33 BMS application. For more information, please refer to Developer Guide > Limitations in this document.",
        "operationId": "getObjectPropertiesById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "description": "objectId is combination of object type and instance number.\nFor example, 00000000 01 (object type: 1) / 000000 00000000 00001011 (instance Number: 11)",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Properties"
            }
          },
          "404": {
            "description": "Properties not found"
          }
        }
      }
    },
    "/v1/protocols/bacnet/local/objects/{objectId}/properties/{propertyId}": {
      "get": {
        "tags": [
          "local object"
        ],
        "summary": "Find BACnet property by ID",
        "description": "Returns a single property\n\nThe SandBox application for this API document will return BACnet object data based on RP-33 BMS application. For more information, please refer to Developer Guide > Limitations in this document.",
        "operationId": "getPropertyById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "description": "objectId is combination of object type and instance number.\nFor example, 00000000 01 (object type: 1) / 000000 00000000 00001011 (instance Number: 11)",
            "required": true,
            "type": "integer"
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "unique property identifier, please find more information from Developer Guide - BACnet Property Identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Property"
            }
          },
          "404": {
            "description": "Property not found"
          }
        }
      },
      "put": {
        "tags": [
          "local object"
        ],
        "summary": "Updated value of property",
        "description": "Update value of property and return it.\n\nThe SandBox application for this API document will return BACnet object data based on RP-33 BMS application. For more information, please refer to Developer Guide > Limitations in this document.",
        "operationId": "updatePropertyValue",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "description": "objectId is combination of object type and instance number.\nFor example, 00000000 01 (object type: 1) / 000000 00000000 00001011 (instance Number: 11)",
            "required": true,
            "type": "integer"
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "unique property identifier, please find more information from Developer Guide - BACnet Property Identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "index",
            "in": "query",
            "description": "This is optional. It can be used to update a value in array.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "priorityIndex",
            "in": "query",
            "description": "This is optional. This will be used to update priority array via\npresent value",
            "required": false,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Provide value in anyOfValue object based on property type. Before you make a request, you need to check type of the property value, such as \"integer\", \"boolean\", \"string\" and so on.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PropertyRaram"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Property"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Property not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Token": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "default": "eyJh..."
        },
        "token_type": {
          "type": "string",
          "default": "bearer"
        },
        "expires_in": {
          "type": "integer",
          "description": "unit is second"
        }
      }
    },
    "Objects": {
      "type": "object",
      "properties": {
        "objectIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "Object": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "integer"
        },
        "objectType": {
          "type": "integer"
        },
        "profileName": {
          "type": "string"
        },
        "objectName": {
          "type": "string",
          "description": "It is BACnet name in EBO."
        }
      }
    },
    "Properties": {
      "type": "object",
      "properties": {
        "propertyIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "Property": {
      "type": "object",
      "properties": {
        "propertyId": {
          "type": "integer",
          "description": "Please find more information from Developer Guide - BACnet Property Identifier"
        },
        "anyOfValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnyValue"
          },
          "example": [
            {
              "type": "boolean",
              "isArray": false,
              "value": true
            },
            {
              "type": "integer",
              "isArray": false,
              "value": 0
            },
            {
              "type": "string",
              "isArray": false,
              "value": "string"
            },
            {
              "type": "float",
              "isArray": false,
              "value": 1.2
            },
            {
              "type": "integer",
              "isArray": true,
              "value": [
                1,
                2,
                3
              ]
            }
          ]
        },
        "readOnly": {
          "type": "boolean"
        }
      }
    },
    "PropertyRaram": {
      "type": "object",
      "properties": {
        "anyOfValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnyValue"
          },
          "example": [
            {
              "type": "float",
              "isArray": false,
              "value": 1.2
            }
          ]
        }
      }
    },
    "AnyValue": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "isArray": {
          "type": "boolean"
        },
        "value": {
          "description": "type of the value can be integer, float, boolean or anything based on type of BACnet property value.",
          "type": "integer"
        }
      }
    },
    "BooleanValue": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "isArray": {
          "type": "boolean"
        },
        "value": {
          "type": "boolean"
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "remainings": {
          "type": "integer"
        },
        "eventList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SingleEvent"
          }
        }
      }
    },
    "SingleEvent": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "integer"
        },
        "eventState": {
          "type": "string"
        },
        "acknowledgedTransitions": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "timeStamp": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "notifyType": {
          "type": "string"
        },
        "eventEnabled": {
          "type": "array",
          "items": {
            "type": "boolean"
          }
        },
        "priorities": {
          "type": "integer"
        }
      }
    },
    "EventNotified": {
      "type": "object",
      "properties": {
        "outOfSync": {
          "type": "boolean"
        },
        "remainings": {
          "type": "integer"
        },
        "eventNotifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SingleEventNotified"
          }
        }
      }
    },
    "SingleEventNotified": {
      "type": "object",
      "properties": {
        "sequenceId": {
          "type": "integer"
        },
        "objectId": {
          "type": "integer"
        },
        "timeStamp": {
          "type": "string"
        },
        "notificationClass": {
          "type": "integer"
        },
        "priority": {
          "type": "integer"
        },
        "eventType": {
          "type": "string"
        },
        "notifyType": {
          "type": "string"
        },
        "ackRequired": {
          "type": "boolean"
        },
        "fromState": {
          "type": "string"
        },
        "toState": {
          "type": "string"
        }
      }
    },
    "WebServerSettings": {
      "type": "object",
      "properties": {
        "portNumber": {
          "type": "integer",
          "default": 443
        },
        "clientCertificateAuthEnabled": {
          "type": "boolean",
          "default": false
        },
        "ewsUserAuthEnabled": {
          "type": "boolean",
          "default": false
        },
        "ewsIPAddress": {
          "type": "string"
        },
        "ewsPortNumber": {
          "type": "integer"
        },
        "ewsResourceId": {
          "type": "string"
        }
      }
    },
    "Users": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "UserCreation": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        },
        "userPassword": {
          "type": "string"
        },
        "writePermission": {
          "type": "boolean"
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "integer"
        },
        "userName": {
          "type": "string"
        },
        "writePermission": {
          "type": "boolean"
        }
      }
    },
    "UserUpdate": {
      "type": "object",
      "properties": {
        "userPassword": {
          "type": "string"
        },
        "writePermission": {
          "type": "boolean"
        }
      }
    },
    "adminUser": {
      "type": "object",
      "properties": {
        "adminName": {
          "type": "string",
          "default": "admin"
        },
        "adminPassword": {
          "type": "string",
          "default": "password"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about the RP-C",
    "url": "https://www.se.com/us/en/download/document/03-30017/"
  }
}