{
  "swagger": "2.0",
  "info": {
    "description": {
      "$ref": "../md_files/README.md"
    },
    "version": "v0.1.11",
    "title": "SmartX IP Series Controller - RP Series Web API"
  },
  "x-servers": [
    {
      "url": "https://se-exchange-uat-sandbox.apigee.net/rpc",
      "description": "Sandbox"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/v1/token": {
      "post": {
        "tags": [
          "token"
        ],
        "summary": "Creating Token",
        "description": "A web token will be created and returned. The Client application then uses the token to access APIs in the next request until the token is valid.",
        "operationId": "gettingtoken",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        }
      }
    },
    "/v1/usermngmt": {
      "get": {
        "tags": [
          "user management"
        ],
        "summary": "Getting a list of user Ids",
        "description": "A list of user Ids will be returned.\\\nThis API will be available for admin user only.",
        "operationId": "gettingusers",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user management"
        ],
        "summary": "Createing a user account",
        "description": "A user account will be created.\\\nThis API will be available for admin user only.",
        "operationId": "creatinguser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Provide user information to create a new account.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreation"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          }
        }
      }
    },
    "/v1/usermngmt/admin": {
      "put": {
        "tags": [
          "user management"
        ],
        "summary": "Update admin user",
        "description": "Updating admin user information.\\\nThis API will be available for admin user only.",
        "operationId": "updateadmin",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Provide user information to create a new account.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/adminUser"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v1/usermngmt/{userId}": {
      "get": {
        "tags": [
          "user management"
        ],
        "summary": "Getting user information",
        "description": "User information will be returned.\\\nThis API will be available for admin user only.",
        "operationId": "gettinguser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "unique number of user.",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user management"
        ],
        "summary": "updating a user information",
        "description": "User information will be updated.\\\nThis API will be available for admin user only.",
        "operationId": "updateuser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "unique number of user.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Provide user information to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user management"
        ],
        "summary": "Deleting user account",
        "description": "User information will be returned.\\\nThis API will be available for admin user only.",
        "operationId": "deleteuser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "unique number of user.",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v1/protocols/bacnet/local/objects": {
      "get": {
        "tags": [
          "local object"
        ],
        "summary": "Getting Object List",
        "description": "A list of objectIds that are accessible via the APIs will be returned.  \nHere's a list of object types available.\\\n0: Analog Input Object \\\n1: Analog Output Object \\\n2: Analog Value Object \\\n3: Binary Input Object \\\n4: Binary Output Object \\\n5: Binary Value Object \\\n13: Multi-state Input Object \\\n14: Multi-state Output Object \\\n19: Multi-state Value Object",
        "operationId": "gettingobject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectType",
            "in": "query",
            "description": "This is optional. BACnet Object type.",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Objects"
            }
          }
        }
      }
    },
    "/v1/protocols/bacnet/local/objects/{objectId}": {
      "get": {
        "tags": [
          "local object"
        ],
        "summary": "Find BACnet object by ID",
        "description": "Returns a single object",
        "operationId": "getObjectById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "description": "objectId is combination of object type and instance number.\\\nFor example, 00000000 01 (object type: 1) / 000000 00000000 00001011\n(instance Number: 11)",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Object not found"
          }
        }
      }
    },
    "/v1/protocols/bacnet/local/objects/{objectId}/properties": {
      "get": {
        "tags": [
          "local object"
        ],
        "summary": "Getting Property List",
        "description": "A list of propertyIDs that exist on the object will be\nreturned.\\\nYou will find BACNet Property Identifier from BACNet protocol document.",
        "operationId": "getObjectPropertiesById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "description": "objectId is combination of object type and instance number.  For example, 00000000 01 (object type: 1) / 000000 00000000 00001011 (instance Number: 11)",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Properties"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Properties not found"
          }
        }
      }
    },
    "/v1/protocols/bacnet/local/objects/{objectId}/properties/{propertId}": {
      "get": {
        "tags": [
          "local object"
        ],
        "summary": "Find BACnet property by ID",
        "description": "Returns a single property",
        "operationId": "getPropertyById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "description": "objectId is combination of object type and instance number.\\\nFor example, 00000000 01 (object type: 1) / 000000 00000000 00001011\n(instance Number: 11)",
            "required": true,
            "type": "integer"
          },
          {
            "name": "propertId",
            "in": "path",
            "description": "unique property identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Property"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Property not found"
          }
        }
      },
      "put": {
        "tags": [
          "local object"
        ],
        "summary": "Updated value of property",
        "description": "Update value of property and return it.",
        "operationId": "updatePropertyValue",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "description": "objectId is combination of object type and instance number.\\\nFor example, 00000000 01 (object type: 1) / 000000 00000000 00001011\n(instance Number: 11)",
            "required": true,
            "type": "integer"
          },
          {
            "name": "propertId",
            "in": "path",
            "description": "unique property identifier",
            "required": true,
            "type": "integer"
          },
          {
            "name": "index",
            "in": "query",
            "description": "This is optional. It can be used to update a value in array.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "priorityIndex",
            "in": "query",
            "description": "This is optional. This will be used to update priority array via\npresent value",
            "required": false,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Provide value anyValueOf based on property type",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PropertyRaram"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Property"
            }
          },
          "400": {
            "description": "Invalid value supplied"
          },
          "404": {
            "description": "Property not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Token": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string"
        },
        "token_type": {
          "type": "string"
        },
        "expires_in": {
          "type": "integer"
        }
      }
    },
    "Objects": {
      "type": "object",
      "properties": {
        "objectIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "Object": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "integer"
        },
        "objectType": {
          "type": "integer"
        },
        "profileName": {
          "type": "string"
        },
        "objectName": {
          "type": "string"
        }
      }
    },
    "Properties": {
      "type": "object",
      "properties": {
        "propertyIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "Property": {
      "type": "object",
      "properties": {
        "propertyId": {
          "type": "integer"
        },
        "anyValueOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IntValue"
          },
          "example": [
            {
              "type": "boolean",
              "isArray": false,
              "value": true
            },
            {
              "type": "integer",
              "isArray": false,
              "value": 0
            },
            {
              "type": "string",
              "isArray": false,
              "value": "string"
            },
            {
              "type": "float",
              "isArray": false,
              "value": 1.2
            },
            {
              "type": "integer",
              "isArray": true,
              "value": [
                1,
                2,
                3
              ]
            }
          ]
        },
        "readOnly": {
          "type": "boolean"
        }
      }
    },
    "PropertyRaram": {
      "type": "object",
      "properties": {
        "anyValueOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IntValue"
          },
          "example": [
            {
              "type": "boolean",
              "isArray": false,
              "value": true
            },
            {
              "type": "integer",
              "isArray": false,
              "value": 0
            },
            {
              "type": "string",
              "isArray": false,
              "value": "string"
            },
            {
              "type": "float",
              "isArray": false,
              "value": 1.2
            },
            {
              "type": "integer",
              "isArray": true,
              "value": [
                1,
                2,
                3
              ]
            }
          ]
        }
      }
    },
    "IntValue": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "isArray": {
          "type": "boolean"
        },
        "value": {
          "type": "integer"
        }
      }
    },
    "BooleanValue": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "isArray": {
          "type": "boolean"
        },
        "value": {
          "type": "boolean"
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "remainings": {
          "type": "integer"
        },
        "eventList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SingleEvent"
          }
        }
      }
    },
    "SingleEvent": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "integer"
        },
        "eventState": {
          "type": "string"
        },
        "acknowledgedTransitions": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "timeStamp": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "notifyType": {
          "type": "string"
        },
        "eventEnabled": {
          "type": "array",
          "items": {
            "type": "boolean"
          }
        },
        "priorities": {
          "type": "integer"
        }
      }
    },
    "EventNotified": {
      "type": "object",
      "properties": {
        "outOfSync": {
          "type": "boolean"
        },
        "remainings": {
          "type": "integer"
        },
        "eventNotifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SingleEventNotified"
          }
        }
      }
    },
    "SingleEventNotified": {
      "type": "object",
      "properties": {
        "sequenceId": {
          "type": "integer"
        },
        "objectId": {
          "type": "integer"
        },
        "timeStamp": {
          "type": "string"
        },
        "notificationClass": {
          "type": "integer"
        },
        "priority": {
          "type": "integer"
        },
        "eventType": {
          "type": "string"
        },
        "notifyType": {
          "type": "string"
        },
        "ackRequired": {
          "type": "boolean"
        },
        "fromState": {
          "type": "string"
        },
        "toState": {
          "type": "string"
        }
      }
    },
    "Users": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "UserCreation": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        },
        "userPassword": {
          "type": "string"
        },
        "writePermission": {
          "type": "boolean"
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "integer"
        },
        "userName": {
          "type": "string"
        },
        "writePermission": {
          "type": "boolean"
        }
      }
    },
    "UserUpdate": {
      "type": "object",
      "properties": {
        "userPassword": {
          "type": "string"
        },
        "writePermission": {
          "type": "boolean"
        }
      }
    },
    "adminUser": {
      "type": "object",
      "properties": {
        "adminName": {
          "type": "string"
        },
        "adminPassword": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about the RP-C",
    "url": "https://www.se.com/us/en/download/document/03-30017/"
  }
}